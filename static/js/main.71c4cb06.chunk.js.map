{"version":3,"sources":["components/Simulator.js","App/App.js","serviceWorker.js","index.js"],"names":["SimulatorContainer","styled","div","_templateObject","TheBox","_templateObject2","physicsInitialState","position","speed","acceleration","roundTo3decimals","value","Math","round","Simulator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","assign","isRunning","timeStarted","Date","now","elapsedTime","timer","setInterval","onTimerUpdate","bind","clearInterval","slice","dim","length","setState","console","log","concat","_Object$assign","react_default","a","createElement","react","style","left","top","onClick","toggleRunning","Component","App","className","Simulator_Simulator","Boolean","window","location","hostname","match","ReactDOM","render","src_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"osBAIA,IAAMA,EAAqBC,IAAOC,IAAVC,KAWlBC,EAASH,IAAOC,IAAVG,KAUNC,EAAsB,CAE1BC,SAAU,CAAC,EAAG,EAAG,EAAG,GACpBC,MAAO,CAAC,EAAG,EAAG,EAAG,GACjBC,aAAc,CAAC,EAAG,EAAG,EAAG,IAGpBC,EAAmB,SAAAC,GAAK,OAAIC,KAAKC,MAAc,IAARF,GAAgB,KAExCG,cACnB,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQN,OAAOO,OAAO,GAAIlB,EAAqB,CAClDmB,WAAW,EACXC,YAAaC,KAAKC,MAClBC,YAAa,IALGb,mFAUlBG,KAAKW,MAAQC,YAAYZ,KAAKa,cAAcC,KAAKd,MAtB9B,mDA0BnBe,cAAcf,KAAKW,+CAInB,GAAIX,KAAKI,MAAME,UAAW,CAIxB,IAHA,IAAMlB,EAAWY,KAAKI,MAAMhB,SAAS4B,QAC/B3B,EAAQW,KAAKI,MAAMf,MAAM2B,QACzB1B,EAAeU,KAAKI,MAAMd,aAAa0B,QACpCC,EAAM,EAAGA,EAAM7B,EAAS8B,OAAQD,IACvC5B,EAAM4B,IAAQ3B,EAAa2B,GAC3B7B,EAAS6B,IAAQ5B,EAAM4B,GAGrB7B,EAAS,GAAK,MAChBC,EAAM,GAAiB,IAAXA,EAAM,GAClBD,EAAS,GAAK,KAEhB,IAAMsB,EAAcF,KAAKC,MAAQT,KAAKI,MAAMG,YAC5CP,KAAKmB,SAAS,CAAE/B,WAAUC,QAAOC,eAAcoB,gBAC/CU,QAAQC,IAAR,GAAAC,OAAeZ,EAAc,IAA7B,cAAAY,OAA6C/B,EAAiBH,EAAS,IAAvE,aAAAkC,OAAsF/B,EAAiBH,EAAS,IAAhH,mDAKF,IAAMkB,GAAaN,KAAKI,MAAME,UAE9B,GADAN,KAAKmB,SAAS,CAAEb,cACZA,EAAW,CACb,IAAMC,EAAcC,KAAKC,MADZc,EAE6BzB,OAAOO,OAAO,GAAIlB,GAApDC,EAFKmC,EAELnC,SAAUC,EAFLkC,EAEKlC,MAAOC,EAFZiC,EAEYjC,aACzBU,KAAKmB,SAAS,CAAE/B,WAAUC,QAAOC,eAAciB,kDAKjD,OAAOiB,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACLH,EAAAC,EAAAC,cAAC7C,EAAD,KACE2C,EAAAC,EAAAC,cAACzC,EAAD,CAAQ2C,MAAO,CACbC,KAAI,GAAAP,OAAKtB,KAAKI,MAAMhB,SAAS,GAAzB,MACJ0C,IAAG,GAAAR,OAAKtB,KAAKI,MAAMhB,SAAS,GAAzB,UAGPoC,EAAAC,EAAAC,cAAA,kBAAU1B,KAAKI,MAAME,UAAYN,KAAKI,MAAMM,YAAc,KAC1Dc,EAAAC,EAAAC,cAAA,UAAQK,QAAS/B,KAAKgC,cAAclB,KAAKd,OAASA,KAAKI,MAAME,UAAsB,OAAV,iBAzDxC2B,aCjBxBC,mLAVX,OACEV,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACbX,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,8DACAF,EAAAC,EAAAC,cAACU,EAAD,cANUH,aCOEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.71c4cb06.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react'\n\nimport styled from 'styled-components'\n\nconst SimulatorContainer = styled.div`\n  position: relative;\n  display: inline-block;\n  overflow: hidden;\n  font-size: 1vmin;\n  width:  60em;\n  height: 60em;\n  background-color: #eee;\n  border: 1px solid gray;\n`\n\nconst TheBox = styled.div`\n  position: absolute;\n  width: 10em;\n  height: 5em;\n  background-color: slateblue;\n  border-radius: 0.5em;\n`\n\nconst TIMER_INTERVAL = 50\n\nconst physicsInitialState = {\n  // X, Y, Z, rotation\n  position: [0, 0, 0, 0],\n  speed: [0, 0, 0, 0],\n  acceleration: [0, 2, 0, 0]\n}\n\nconst roundTo3decimals = value => Math.round(value * 1000) / 1000\n\nexport default class Simulator extends Component {\n  constructor (props) {\n    super(props)\n    this.state = Object.assign({}, physicsInitialState, {\n      isRunning: false,\n      timeStarted: Date.now(),\n      elapsedTime: 0\n    })\n  }\n\n  componentDidMount () {\n    this.timer = setInterval(this.onTimerUpdate.bind(this), TIMER_INTERVAL)\n  }\n\n  componentWillUnmount () {\n    clearInterval(this.timer)\n  }\n\n  onTimerUpdate () {\n    if (this.state.isRunning) {\n      const position = this.state.position.slice()\n      const speed = this.state.speed.slice()\n      const acceleration = this.state.acceleration.slice()\n      for (let dim = 0; dim < position.length; dim++) {\n        speed[dim] += acceleration[dim]\n        position[dim] += speed[dim]\n      }\n      // Bounce\n      if (position[1] > 200) {\n        speed[1] = -speed[1] * 0.9\n        position[1] = 200\n      }\n      const elapsedTime = Date.now() - this.state.timeStarted\n      this.setState({ position, speed, acceleration, elapsedTime })\n      console.log(`${elapsedTime / 100}% { left: ${roundTo3decimals(position[0])}px; top: ${roundTo3decimals(position[1])}px; }`)\n    }\n  }\n\n  toggleRunning () {\n    const isRunning = !this.state.isRunning\n    this.setState({ isRunning })\n    if (isRunning) {\n      const timeStarted = Date.now()\n      const { position, speed, acceleration } = Object.assign({}, physicsInitialState)\n      this.setState({ position, speed, acceleration, timeStarted })\n    }\n  }\n\n  render () {\n    return <Fragment>\n      <SimulatorContainer>\n        <TheBox style={{\n          left: `${this.state.position[0]}px`,\n          top: `${this.state.position[1]}px`\n        }} />\n      </SimulatorContainer>\n      <p>Time: {this.state.isRunning ? this.state.elapsedTime : '-'}</p>\n      <button onClick={this.toggleRunning.bind(this)}>{!this.state.isRunning ? 'Start' : 'Stop'}</button>\n    </Fragment>\n  }\n}\n","import React, { Component } from 'react'\nimport './App.css'\n\nimport Simulator from '../components/Simulator'\n\nclass App extends Component {\n  render () {\n    return (\n      <div className='App'>\n        <h1>CSS Motion Toy</h1>\n        <p>Create CSS animations based on physics simulation</p>\n        <Simulator />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}